import sys
import os
from src.ai.genetic_algorithm import GeneticAlgorithm


def train_ai(
    generations: int = 50,
    population_size: int = 50,
    field_width: int = 15,
    field_height: int = 15,
    save_interval: int = 10
):
    print("=" * 60)
    print("–û–ë–£–ß–ï–ù–ò–ï –ò–ò –î–õ–Ø –ò–ì–†–´ –ó–ú–ï–ô–ö–ê")
    print("=" * 60)
    print(f"\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è:")
    print(f"  –ü–æ–∫–æ–ª–µ–Ω–∏–π: {generations}")
    print(f"  –†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏: {population_size}")
    print(f"  –†–∞–∑–º–µ—Ä –ø–æ–ª—è: {field_width}x{field_height}")
    print(f"  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {save_interval} –ø–æ–∫–æ–ª–µ–Ω–∏–π")
    print("\n–ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...\n")
    
    ga = GeneticAlgorithm(
        population_size=population_size,
        mutation_rate=0.1,
        mutation_strength=0.5,
        elite_count=5,
        field_width=field_width,
        field_height=field_height
    )
    
    best_overall_score = 0
    
    try:
        for gen in range(generations):
            stats = ga.evolve_generation(verbose=True)
            
            if stats['best_score'] > best_overall_score:
                best_overall_score = stats['best_score']
                print(f"  üéâ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥! –°—á—ë—Ç: {best_overall_score}")
            
            if (gen + 1) % save_interval == 0:
                filename = f"best_ai_gen_{gen + 1}.npy"
                ga.save_best(filename)
            
            if (gen + 1) % 10 == 0:
                print("-" * 60)
        
        print("\n" + "=" * 60)
        print("–û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("=" * 60)
        print(f"\n–õ—É—á—à–∏–π –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"  –°—á—ë—Ç: {ga.best_score}")
        print(f"  Fitness: {ga.best_fitness:.1f}")
        
        ga.save_best("best_ai.npy")
        print(f"\n–õ—É—á—à–∏–π –ò–ò —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ best_ai.npy")
        print("\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ main.py –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–°–º–æ—Ç—Ä–µ—Ç—å –ò–ò' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        
    except KeyboardInterrupt:
        print("\n\n–û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ª—É—á—à–µ–≥–æ –ò–ò...")
        ga.save_best("best_ai_interrupted.npy")
        print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ best_ai_interrupted.npy")


if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser(description='–û–±—É—á–µ–Ω–∏–µ –ò–ò –¥–ª—è –∏–≥—Ä—ã –ó–º–µ–π–∫–∞')
    parser.add_argument('--generations', type=int, default=50,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)')
    parser.add_argument('--population', type=int, default=50,
                       help='–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)')
    parser.add_argument('--width', type=int, default=15,
                       help='–®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 15)')
    parser.add_argument('--height', type=int, default=15,
                       help='–í—ã—Å–æ—Ç–∞ –ø–æ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 15)')
    parser.add_argument('--save-interval', type=int, default=10,
                       help='–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∫–∞–∂–¥—ã–µ 10 –ø–æ–∫–æ–ª–µ–Ω–∏–π)')
    
    args = parser.parse_args()
    
    train_ai(
        generations=args.generations,
        population_size=args.population,
        field_width=args.width,
        field_height=args.height,
        save_interval=args.save_interval
    )
